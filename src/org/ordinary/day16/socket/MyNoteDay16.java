package org.ordinary.day16.socket;

public class MyNoteDay16 {

// -------- Port --------
// 포트는 "논리적인 접속장소"를 뜻하며, 인터넷 프로토콜인 TCP/IP를 사용할 때 클라이언트 프로그램이 
// 네트워크 상의 특정 서버 프로그램을 지정하는 방법으로 사용한다.
	
// 네트워크 상에서 통신을 할 때 IP 주소를 바탕으로 해당 서버가 있는 컴퓨터에 접근하게 된다.
// 하나의 IP에서 여러 애플리케이션을 실행할 경우, 컴퓨터에는 여러 개의 서버가 실행하게 된다.
// 이때 포트번호를 통해 대상 IP 기기의 특정 애플리케이션의 서버에 접속할 수 있도록 알려주어야 한다.

// 만약 한 서버 인트턴스에서 웹 서버와 메일 서버 두개를 동시에 실행 중인 상황이 있다 치자.
// 이 경우 IP 주소만으로는 어느 서버로 요청을 보내는지 알 수 없다. 따라서 포트 번호를 통해 receiver를
// 특정하여 어느 서버로 보내는 요청인지 특정할 수 있다.
	
// well-known ports ( 잘 알려진 포트 )
// 시스템이 사용하는 포트 번호로 잘 알려진 응용프로그램에서 사용하는 포트 번호이다.
// 0 ~ 1023번 까지의 장 알려진 포트 번호는 주요 통신으 위한 규약에 따라 이미 정해져 있는 포트이다.
// 잘 알려진 포트 번호는 개발자가 사용하지 않는 것이 좋다.
	
// - 자주 사용되는 포트 번호 -
//	80	:	HTTP	TCP		웹 서버 접속
//	443	:	HTTPS	TCP		웹 서버 접속(SSL)
//	110	:	POP3	TCP		메일 읽기
//	25	:	SMTP	TCP		메일 서버간 메일 전송
//	22	:	SSH		TCP		컴퓨터 원격 로그인
//	53	:	DNS		UDP		DNS 질의
//	123	:	NTP		TCP		시간 동기화
//	20	:	FTP		TCP		데이터 전송
//	21	:	FTP		TCP		FTP 제어

	
// -------- Socket --------
	
//	  --- TCP 네트워킹 ---
// 먼저 소켓이라는 개념에 들어가기 앞서 TCP 네트워킹 이라는 것이 무엇인지 간단하게 소개한다.
// TCP(Transmission Control Protocol)은 연결지향적 프로토콜을 말한다. 연결지향 프로토콜이란 클라이언트와 서버가 
// 연결된 상태에서 데이터를 주고받는 프로토콜을 의미한다.
// 클라이언트가 서버에게 연결을 요청하고, 서버가 그 요청을 수락하면 통신선로가 고정되고, 모든 데이터는 그 고정된 통신선로를 통해서 순차적으로 전달된다.
// 이러한 TCP서버의 역할은 두 가지로 볼 수 있는데 하나는 클라이언트가 연결요청을 하면 연결을 수락하는 것이고, 다른 하나는 연결된 클라이언트와 통신하는 것이다.
// 자바에서는 이 역할을 대신 해주는 클래스를 따로 제공하고 있는데 그것이 바로 소켓(Socket)이란 클래스이다.

// 소켓(socket)은 프로세스 간 통신에 사용되는 양쪽 끝 단을 의미한다. 쉽게 말해서 프로그램은 다른 컴퓨터에 있는 프로그램과 통신하기 위해 바로 이 소켓을
// 이용하는데, 프로그램이 통신하기 위해 소프트웨어로 작성된 통신의 접속점이라고 할 수 있는 것이다.
// 때문에 만약 서버와, 그 서버에 접속하고자 하는 클라이언트가 있다고 한다면 그 둘에게 모두 이 소켓이 존재해야 둘 사이의 소통이 가능하다.

// -- 요약 --
// 소켓 : TCP/IP 네트워크를 이용하여 쉽게 통신 프로그램을 작성하도록 지원하는 기반 기술
// 	- 두 응용프로그램 간의 양방향 통신 링크의 한쪽 끝 단
//	- 소켓끼리 데이터를 주고받음
//	- 소켓은 특정 IP 포트 번호와 결합
// 자바로 소켓 통신할 수 있는 라이브러리 지원
// 소켓 종류 : 서버 소켓(ServerSocket)과 클라이언트 소켓(Socket)
	

// -- socket 이용하기 --
// ServerSocket( 서버 소켓 )
//	- 서버 프로그램에서 사용되는 소켓, 서버 소켓은 클라이언트로부터 연결요청이 오기를 기다렸다가 연결 요청이 오면 클라이언트와
//	  연결을 맺고 다른 소켓을 만드는 일을 한다. 
// ServerSocket serverSocket = new ServerSocket(포트번호); -> 서버소켓 생성
// Socket socket = server.accept(); -> 클라이언트가 연결요청을 하면 클라이언트와 소통할 소켓을 만들어 리턴
// accept()는 클라이언트가 연결 요청하기 전까지 블로킹되는데, 스레드가 대기 상태가 된다는 뜻이다.
	
// Client Socket ( 클라이언트 소켓 )
// 클라이언트 프로그램에서 클라이언트 소켓은 서버 프로그램으로 연결요청을 하는 것과 데이터 전송을 하는 일을 한다.
//	Socket socket = new Socket(서버 아이피번호, 서버 포트번호); -> 클라이언트 소켓 생성
	
// port번호를 서버측과 클라이언트측의 socket에 동일하게 해주어야 통신이 가능해진다.
// 클라이언트 측 socket ip번호는 로컬ip주소 127.0.0.1 사용
	
// socket의 입출력을 담당하는 2가지의 메소드 - InputStream getInputStream()
//								   - OutputStream getOutputStream()

// socket.getInputStream() , socket.getOutputStream() 으로 소켓의 입력스트림과 출력스트림을 생성한다.
// socket데이터를 다룰때 유용한 보조스트림 객체 DataInputStream, DataOutputStream 을 이용하여 데이터 처리를 해준다.
// 중요한 것은 서버와 클라이언트 간의 관계는 일방적인 관계가 아닌 쌍방의 관계라는 점이다.
// 송신이 있다면 반대측에서 수신이 반드시 있어야한다.
// 1. 클라이언트 -> 소켓
// 2. 소켓 -> 서버
// 3. 서버 -> 소켓
// 4. 소켓 -> 클라이언트
// 5. ...
	
}
